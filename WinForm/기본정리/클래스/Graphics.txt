Graphics객체 얻는 방법
Control 클래스를 상속받은 클래스에서 Paint 이벤트 핸들러를 통해 얻기
Control 클래스의 OnPaint() 메서드를 재정의해 얻기
컨트롤 클래스의 CreateGraphics 메서드를 사용해 얻어오기
몇몇 컨트롤이 제공하는 사용자 그리기(Owner draw)기능을 이용해 얻어오기
비트맵과 메타파일 등에서는 static 메서드인 Graphics.FromImage(...)을 이용해 얻기
프린트 할 경우에는 PrintPage 이벤트 핸들러가 전달하는 PrintPageEventArgs 형의 개체를 통해 얻기
Win32 코드를 사용할 경우 static메서드인 Graphics.FromeHwnd와  Graphics.FromHdc를 사용해 얻음


//================================================================================================
Control 클래스를 상속받은 클래스에서 Paint 이벤트 핸들러를 통해 얻기
 무효화 영역관련 , Graphics객체 얻는 매개변수가 들어와야함
 GDI+에서 가장 많이 사용하는 방법 중 하나임
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam1 : Form
{
    public GDIExam1()
    {
        this.Text = "Graphics 개체 얻기1";

        // paint 이벤트 핸들러 등록
        this.Paint += new PaintEventHandler(GDIExam_Paint);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam1());
    }

   // sender : Paint 이벤트가 적용될 객체를 가리킴
   // pea     : Paint핸들러 내부 사용시 필요한 인자 
  //              2개의 속성을 가지고 있슴
	    - Graphics (그래픽 출력 객체) : Graphics(자료형)
                     Rectangle(무효한 사각형 인자) : Rectangle(자료형)

    public void GDIExam_Paint(object sender, PaintEventArgs pea)
    {
        Graphics grfx = pea.Graphics;
        grfx.FillRectangle(new SolidBrush(Color.Blue), this.ClientRectangle);
    }
}
//================================================================================================	
 Control 클래스의 OnPaint() 메서드를 재정의해 얻기
 무효화 영역관련, Graphics객체 얻는 매개변수가 들어와야함
 이벤트 핸들러 등록과정이 필요 없기 때문에 간단히Graphics 객체를 얻을 수 있다
 OnPaint()메서드는 Control 클래스에 정의되어 있음
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam2 : Form
{
    public GDIExam2()
    {
        this.Text = "Graphics 개체 얻기2";
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam2());
    }

    protected override void OnPaint(PaintEventArgs pea)
    {
        Graphics grfx = pea.Graphics;
        grfx.FillRectangle(new SolidBrush(Color.Blue), this.ClientRectangle);
    }
}
//================================================================================================
 컨트롤 클래스의 CreateGraphics 메서드를 사용해 얻어오기
 사용이 끝나면 Dispose()메서드를 사용하여 반드시 해제해야 함
 주로 윈폼 위에 배치된 컨트롤에서 컨트롤들의 개별 화면에 GDI+작업을 직접 처리할 때 주로 사용됨 
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam3 : Form
{
    Button btn = null;
    public GDIExam3()
    {
        this.Text = "Graphics 개체 얻기3";
        btn = new Button();
        btn.Text = "버튼위에 GDI+ 출력";
        btn.SetBounds(10, 10, 200, 100);
        btn.Click += new EventHandler(btn_Click);
        this.Controls.Add(btn);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam3());
    }

    public void btn_Click(object sender, EventArgs e)
    {

        Graphics grfx = btn.CreateGraphics();
        grfx.FillRectangle(new SolidBrush(Color.Blue), btn.ClientRectangle);
        grfx.Dispose();
        // Dispose()시키지 않으면 해당 개체의 Graphics 리소스가 회수되지 않기 
        // 때문에 시스템에 문제를 일으킬 수 있슴
        // 아래 구문이 더 깔끔함
        // using(Graphics grfx = btn.CreateGraphics())
        // {				 
        //	 grfx.FillRectangle(new SolidBrush(Color.Blue), this.ClientRectangle);
        // }

    }
}
//================================================================================================

 몇몇 컨트롤이 제공하는 사용자 그리기(Owner draw)기능을 이용해 얻어오기
 MeasureItem or DrawItem등의 이벤트들은 MeasureItemEventArgs or DrawItemEventArgs형의 객체를 전달함
 MeasureItem을 통해 개체를 얻을 수 있는 컨트롤 ( ListBox, ComboBox, CheckListBox, TabControl, MenuItem)
 DrawItem을 통해 개체를 얻을 수 있는 컨트롤 ( ListBox, ComboBox)
 메뉴에 사용자가 원하는 아이콘을 넣거나 탭 컨트롤 상단에 이미지와 색상을 넣는 작업을 하고 싶다면 이를 통해 구현하게 됨
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam4 : Form
{
    ListBox lstbox = null;
    public GDIExam4()
    {
        this.Text = "Graphics 개체 얻기4";
        lstbox = new ListBox();
        lstbox.SetBounds(10, 10, 200, 100);
        lstbox.Items.Add("사과");
        lstbox.Items.Add("포도");
        lstbox.Items.Add("수박");
        lstbox.DrawItem += new System.Windows.Forms.DrawItemEventHandler(GDIExam_DrawItem);
        lstbox.MeasureItem += new System.Windows.Forms.MeasureItemEventHandler(GDIExam_MeasureItem);

        this.Controls.Add(lstbox);
        this.Load += new EventHandler(GDIExam_Load);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam4());
    }

    private void GDIExam_Load(object sender, EventArgs e)
    {
        lstbox.DrawMode = DrawMode.OwnerDrawVariable;
        //lstbox.DrawMode = DrawMode.OwnerDrawFixed;
    }

    // 먼저 호출됨
    private void GDIExam_MeasureItem(object sender, MeasureItemEventArgs e)
    {
        Graphics g = e.Graphics;
        Console.WriteLine("{0} : MeasureItem 이벤트 실행", e.ToString());
    }

    // ListBox가 다시 그려질 때마다 호출됨(데이터 갯수만큼 호출됨)
    private void GDIExam_DrawItem(object sender, DrawItemEventArgs e)
    {
        Graphics g = e.Graphics;

        Brush brush = Brushes.Black;

        switch (e.Index)
        {
            case 0:
                brush = Brushes.Red;
                break;
            case 1:
                brush = Brushes.Violet;
                break;
            case 2:
                brush = Brushes.Green;
                break;
        }
        g.DrawString(lstbox.Items[e.Index].ToString(),
                      e.Font, brush, e.Bounds, StringFormat.GenericDefault);

        Console.WriteLine("{0} : DrawItem 이벤트 실행", e.ToString());
    }
}
//================================================================================================
 비트맵과 메타파일 등에서는 static 메서드인 Graphics.FromImage(...)을 이용해 얻기
 이미지에 대한 Graphics 개체를 얻을 때 사용
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam5 : Form
{
    Button btn = null;
    Image image = null;
    public GDIExam5()
    {
        this.Text = "Graphics 개체 얻기5";
        btn = new Button();
        btn.Text = "그림위에 글씨 쓰기";
        btn.SetBounds(10, 100, 200, 100);
        btn.Click += new EventHandler(btn_Click);
        this.Controls.Add(btn);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        Graphics grfx = e.Graphics;
        if (image != null)
            grfx.DrawImage(image, 0, 0);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam5());
    }

    public void btn_Click(object sender, EventArgs e)
    {
        Image imageFile = Image.FromFile("ocean.jpg");
        Graphics grfx = Graphics.FromImage(imageFile);

        Font font = new Font("돋음", 20);
        Brush brush = Brushes.Pink;

        grfx.DrawString("이미지에 글자쓰기", font, brush, 10, 10);
        grfx.Dispose();

        imageFile.Save("ocean.gif", System.Drawing.Imaging.ImageFormat.Gif); //System.Drawing.Imaging.ImageFormat.Gif 확장자 변환가능

        this.image = Image.FromFile("ocean.gif");
        this.Invalidate(this.ClientRectangle);
    }
}
//================================================================================================
 프린트 할 경우에는 PrintPage 이벤트 핸들러가 전달하는 PrintPageEventArgs 형의 개체를 통해 얻기
 system.Drawing.Printing.PrintDocument 클래스의 PrintPage 이벤트 이용
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
using System.Drawing.Printing;
class GDIExam6 : Form
{
    Button btn = null;
    public GDIExam6()
    {
        this.Text = "Graphics 개체 얻기6";
        btn = new Button();
        btn.Text = "문서를 프린트합니다.";
        btn.SetBounds(10, 10, 200, 100);
        btn.Click += new EventHandler(btn_Click);
        this.Controls.Add(btn);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam6());
    }

    public void btn_Click(object sender, EventArgs e)
    {
        try
        {
            PrintDocument pd = new PrintDocument();	// 1) 
            pd.PrintPage += new PrintPageEventHandler(this.pd_PrintPage);//2)
            pd.Print();		// 3) 
        }
        catch (Exception ex)
        {
            MessageBox.Show("프린터 도중 예외 발생 :" + ex.ToString());
        }
    }


    private void pd_PrintPage(object sender, PrintPageEventArgs ppe)//4) 
    {
        string strText = DateTime.Today + " : 문서 작성자 [CJK] ";
        ppe.HasMorePages = false; //HasMorePages--> true 라면 무한반복

        Graphics g = ppe.Graphics;		// 5) 
        Pen pen = new Pen(Color.Black, 2);
        for (int i = 0; i < this.ClientSize.Width; i += 20)
            g.DrawLine(pen, i, 0, i, this.ClientSize.Height);

        for (int j = 0; j < this.ClientSize.Height; j += 20)
            g.DrawLine(pen, 0, j, this.ClientSize.Width, j);

        g.DrawString(strText, this.Font, Brushes.Black, 10, this.ClientSize.Height + 20);
    }
}

//================================================================================================
 Win32 코드를 사용할 경우 static메서드인 Graphics.FromeHwnd와  Graphics.FromHdc를 사용해 얻음
 예제)
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam7 : Form
{
    Button btn1 = null;
    Button btn2 = null;
    public GDIExam7()
    {
        this.Text = "Graphics 개체 얻기7";
        btn1 = new Button();
        btn1.Text = "Graphics.FromHwnd 이용";
        btn1.SetBounds(10, 10, 200, 100);
        btn1.Click += new EventHandler(btn_Click);

        btn2 = new Button();
        btn2.Text = "Graphics.FromHdc 이용";
        btn2.SetBounds(10, 130, 200, 100);
        btn2.Click += new EventHandler(btn_Click);

        this.Controls.Add(btn1);
        this.Controls.Add(btn2);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam7());
    }

    [System.Runtime.InteropServices.DllImportAttribute("gdi32.dll")]
    private static extern bool Ellipse(
            IntPtr hdc,    // handle to DC
            int nLeftRect,  // x-coord of upper-left corner of rectangle
            int nTopRect,   // y-coord of upper-left corner of rectangle
            int nRightRect, // x-coord of lower-right corner of rectangle
            int nBottomRect // y-coord of lower-right corner of rectangle
        );

    public void btn_Click(object sender, EventArgs e)
    {
        if ((Button)sender == btn1)
        {
            IntPtr hwnd = new IntPtr();
            hwnd = this.Handle;

            Graphics grfx = Graphics.FromHwnd(hwnd);
            grfx.FillRectangle(Brushes.Blue, this.ClientRectangle);
            grfx.Dispose();

            hwnd = btn1.Handle;
            grfx = Graphics.FromHwnd(hwnd);
            grfx.DrawRectangle(new Pen(Color.Pink, 5), 10, 10, 180, 80);
            grfx.Dispose();
        }
        else
        {
            Graphics g = this.btn2.CreateGraphics();
            g.DrawEllipse(Pens.Blue, 10, 10, 100, 70);

            IntPtr hdc = new IntPtr();
            hdc = g.GetHdc(); //API 함수를 사용하기위해 얻어냄
            Ellipse(hdc, 100, 10, 50, 50);

            Graphics new_g = Graphics.FromHdc(hdc);
            new_g.DrawRectangle(new Pen(Color.Blue, 5), 10, 10, 180, 80);

            g.ReleaseHdc(hdc);

            g.Dispose();
        }
    }
}

//===============================================================================================================================================================================================

메서드 사용법

GDI+ 그래픽  그리기

Clear(전체 그리기 화면을 지우고, 화면을 배경색으로 채움)
DrawArc, DrawBezier(두개의 끝점을 잇는 Bazier 스플라인)
DrawCurve, DrawEllipse,Drawimage, DrawLine, DrawPath, DrawPie, DrawPolygon(다각형그리기)
DrawRectangle, DrawString, FillElipse, FillPath, FillPolygon,
FillRectangle, FillRegion



using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam8 : Form
{
    public GDIExam8()
    {
        this.Text = "그래픽 그리기";
        this.Size = new Size(200, 200);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam8());
    }

    protected override void OnPaint(PaintEventArgs pea)
    {
        Graphics g = pea.Graphics;
        Pen pen = new Pen(Color.Black, 2);
        g.DrawLine(pen, 10, 10, 190, 190);
        g.DrawRectangle(pen, 10, 10, 100, 100);
        g.DrawEllipse(pen, 50, 50, 100, 100);
        g.DrawArc(pen, 100, 100, 80, 80, 0, -90);
    }
}

 다각형과 타원 그리기
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam9 : Form
{
    Point[] point1 = new Point[5];
    Point[] point2 = new Point[3];

    public GDIExam9()
    {
        this.Text = "다각형과 타원 그리기";
        this.Size = new Size(300, 400);

        point1[0] = new Point(10, 20);
        point1[1] = new Point(20, 70);
        point1[2] = new Point(50, 100);
        point1[3] = new Point(10, 150);
        point1[4] = new Point(100, 100);

        point2[0] = new Point(100, 10);
        point2[1] = new Point(10, 100);
        point2[2] = new Point(190, 100);

    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam9());
    }

    protected override void OnPaint(PaintEventArgs pea)
    {
        Graphics g = pea.Graphics;
        Pen pen = new Pen(Color.Red, 2);// 빨간색2의 두께를 갖는 선으로
        g.DrawPolygon(pen, point1);// 5개 점을 경유하는 다각형 그림

        pen = new Pen(Color.Blue, 3);// 파랑색 3의 두께를 갖는 선으로
        g.DrawPolygon(pen, point2);   // 3개의 점을 경유하는 다각형

        pen = new Pen(Color.Black, 1);// 두께 1의 검은색 선으로
        for (int i = 0; i < 200; i += 20)    // 9개의 타원을 그림
        {
            g.DrawEllipse(pen, 70, 130, i, i + 50);
        }
    }
}

 FillXXX 계열 메서드 사용하기 
using System;
using System.Drawing;
using System.Windows.Forms;
using System.Drawing.Drawing2D;
class GDIExam10 : Form
{
    Point[] point = new Point[3];
    public GDIExam10()
    {
        this.Text = "FillXXX 계열 메서드";
        point[0] = new Point(100, 10);
        point[1] = new Point(10, 100);
        point[2] = new Point(190, 100);
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam10());
    }

    protected override void OnPaint(PaintEventArgs pea)
    {
        Graphics g = pea.Graphics;
        g.FillEllipse(Brushes.Brown, 10, 100, 50, 50);// 채워진 타원 그리기

        GraphicsPath graphPath = new GraphicsPath();
        graphPath.AddEllipse(0, 0, 150, 100);// 타원 등록
        g.FillPath(Brushes.Red, graphPath);// FilPath를 사용해 영역을 그림

        g.FillPie(Brushes.Yellow, 200, 10, 100, 100, 90, 180);

        g.FillPolygon(Brushes.Green, point);

        g.FillRectangle(Brushes.Magenta, 50, 150, 100, 100);

        Rectangle fillRect = new Rectangle(150, 150, 100, 100);
        Region fillRegion = new Region(fillRect);
        g.FillRegion(Brushes.Orange, fillRegion);
    }
}

 그라데이션 효과 주기
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam11 : Form
{
    public GDIExam11()
    {
        this.Text = "그라데이션 효과주기";
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam11());
    }

    protected override void OnPaint(PaintEventArgs pea)
    {
        Graphics g = pea.Graphics;
        for (int i = 0; i < 256; i++)
        {
            // 색상을 바꿔가며, 좌측 상단에서 대각선 방향으로 선을 그림
            g.DrawLine(new Pen(Color.FromArgb(i, 0, 0)), 10, 10, 265 - i, 10 + i);
        }
    }
}

 얼굴 그리기
using System;
using System.Drawing;
using System.Windows.Forms;
class GDIExam12 : Form
{
    public GDIExam12()
    {
        this.Text = "얼굴 그리기";
    }

    static void Main(string[] args)
    {
        Application.Run(new GDIExam12());
    }

    protected override void OnPaint(PaintEventArgs pea)
    {
        Graphics g = pea.Graphics;
        g.DrawArc(Pens.Black, 70, 20, 130, 180, 180, -180);  // 아랫턱 그리기

        for (int i = 0; i < 15; i++)
        {
	// 머리카락그리기
            g.DrawArc(Pens.Brown, 50 + 2 * i, 50, 100, 160, 130, 80);
            g.DrawArc(Pens.Brown, 20 + 2 * i, 50, 190, 160, 140, 100);
            g.DrawArc(Pens.Brown, 90 + 2 * i, 50, 100, 160, 200, 260);
            g.DrawArc(Pens.Brown, 80 + 3 * i, 50, 100, 90, 130, 80);
        }

        g.DrawEllipse(Pens.Black, 90, 120, 20, 25);			// 눈
        g.DrawEllipse(Pens.Black, 155, 120, 20, 25);		// 눈
        g.FillEllipse(Brushes.Blue, 93, 130, 15, 15);		// 눈동자
        g.FillEllipse(Brushes.Blue, 158, 130, 15, 15);		// 눈동자
        g.DrawArc(Pens.Black, 110, 150, 50, 40, 0, 180);
    }
}



