//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatingClientWPF_0510.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StudentData", Namespace="http://schemas.datacontract.org/2004/07/FileIOSystemServer_0510")]
    [System.SerializableAttribute()]
    public partial class StudentData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeatNumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Flag {
            get {
                return this.FlagField;
            }
            set {
                if ((this.FlagField.Equals(value) != true)) {
                    this.FlagField = value;
                    this.RaisePropertyChanged("Flag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SeatNum {
            get {
                return this.SeatNumField;
            }
            set {
                if ((this.SeatNumField.Equals(value) != true)) {
                    this.SeatNumField = value;
                    this.RaisePropertyChanged("SeatNum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IFile", CallbackContract=typeof(ChatingClientWPF_0510.ServiceReference2.IFileCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFile {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/UpLoadFile", ReplyAction="http://tempuri.org/IFile/UpLoadFileResponse")]
        bool UpLoadFile(string name, int idx, string filename, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/UpLoadFile", ReplyAction="http://tempuri.org/IFile/UpLoadFileResponse")]
        System.Threading.Tasks.Task<bool> UpLoadFileAsync(string name, int idx, string filename, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/Join", ReplyAction="http://tempuri.org/IFile/JoinResponse")]
        ChatingClientWPF_0510.ServiceReference2.StudentData[] Join(string name, int idx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/Join", ReplyAction="http://tempuri.org/IFile/JoinResponse")]
        System.Threading.Tasks.Task<ChatingClientWPF_0510.ServiceReference2.StudentData[]> JoinAsync(string name, int idx);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IFile/Leave")]
        void Leave(string name, int idx);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IFile/Leave")]
        System.Threading.Tasks.Task LeaveAsync(string name, int idx);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/FileRecive")]
        void FileRecive(string name, int idx, string msg, byte[] filedata);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/UserEnter")]
        void UserEnter(string name, int idx);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFile/UserLeave")]
        void UserLeave(string name, int idx);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileChannel : ChatingClientWPF_0510.ServiceReference2.IFile, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileClient : System.ServiceModel.DuplexClientBase<ChatingClientWPF_0510.ServiceReference2.IFile>, ChatingClientWPF_0510.ServiceReference2.IFile {
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool UpLoadFile(string name, int idx, string filename, byte[] data) {
            return base.Channel.UpLoadFile(name, idx, filename, data);
        }
        
        public System.Threading.Tasks.Task<bool> UpLoadFileAsync(string name, int idx, string filename, byte[] data) {
            return base.Channel.UpLoadFileAsync(name, idx, filename, data);
        }
        
        public ChatingClientWPF_0510.ServiceReference2.StudentData[] Join(string name, int idx) {
            return base.Channel.Join(name, idx);
        }
        
        public System.Threading.Tasks.Task<ChatingClientWPF_0510.ServiceReference2.StudentData[]> JoinAsync(string name, int idx) {
            return base.Channel.JoinAsync(name, idx);
        }
        
        public void Leave(string name, int idx) {
            base.Channel.Leave(name, idx);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(string name, int idx) {
            return base.Channel.LeaveAsync(name, idx);
        }
    }
}
