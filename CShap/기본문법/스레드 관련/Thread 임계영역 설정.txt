//Monitor를 이용한 임계영역 설정=====================================================

Monitor.Enter(공동으로 사용하는 변수)
try
{
}
catch
{
}
finally
{
	Monitor.Exit(공용으로 사용하는 변수)
}

Monitor는 하나의 변수를 하나의 스레드만이 사용 할 수 있도록 해주는 방법이다.
Monitor.Enter를 이용해서 임계영역 안의 다른 스레드의 접근을 거부하고,
허락을 받은 스레드만이 들어가서 수행 할 수 있도록 한다.

다만 여러게의 스레드가 돌아갈 때 어떤 순서대로 스레드가 돌아갈 지는 알 수 없다.

//Lock을 이용한 임계영역 설정========================================================
	private static Object obj = new Object();

        private readonly object thisLock = new object();

        int count = 0;
        public Program(int count)
        {
            this.count = count;
        }
        public void ShowData()
        {
          
            
                try
                {
                    lock (thisLock)
                    {
                        for (int i = 0; i < 10; i++)
                        {
                            Console.WriteLine(Thread.CurrentThread.Name + " : " + i);
                            //Thread.Sleep(100);
                            //if (this.count == i) throw (new Exception());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                finally
                {

                }
            
            

Lock의 중괄호 안에 있는 영역은 크리티컬 섹션과 같아 진다.
스레드가 서로 겹쳐서 오류를 발생시키지는 않으나, Monitor에 비해서 순차적이지 않음
하나의 스레드가 끝나자 마자 어떤 스레드가 시작될지는 알수가 없다.
